(ebnf (doc (**\nCombined lexer and parser grammar for a variant of EBNF\n=======================================================\n\nA simple interpretation of ISO EBNF to illustrate markdown document\ncomment usage.\n\n@version 0.0.1_DEMO\n\n*)) (statement (doc (**\nThe rule __letter__ is the set of upper and lower cases letters from A-Z.\n\n*)) (lhs letter) = (rhs (clause (literal "A")) (op |) (clause (literal "B")) (op |) (clause (literal "C")) (op |) (clause (literal "D")) (op |) (clause (literal "E")) (op |) (clause (literal "F")) (op |) (clause (literal "G")) (op ||) (clause (literal "H")) (op |) (clause (literal "I")) (op |) (clause (literal "J")) (op |) (clause (literal "K")) (op |) (clause (literal "L")) (op |) (clause (literal "M")) (op |) (clause (literal "N")) (op ||) (clause (literal "O")) (op |) (clause (literal "P")) (op |) (clause (literal "Q")) (op |) (clause (literal "R")) (op |) (clause (literal "S")) (op |) (clause (literal "T")) (op |) (clause (literal "U")) (op ||) (clause (literal "V")) (op |) (clause (literal "W")) (op |) (clause (literal "X")) (op |) (clause (literal "Y")) (op |) (clause (literal "Z")) (op ||) (clause (literal "a")) (op |) (clause (literal "b")) (op |) (clause (literal "c")) (op |) (clause (literal "d")) (op |) (clause (literal "e")) (op |) (clause (literal "f")) (op |) (clause (literal "g")) (op ||) (clause (literal "h")) (op |) (clause (literal "i")) (op |) (clause (literal "j")) (op |) (clause (literal "k")) (op |) (clause (literal "l")) (op |) (clause (literal "m")) (op |) (clause (literal "n")) (op ||) (clause (literal "o")) (op |) (clause (literal "p")) (op |) (clause (literal "q")) (op |) (clause (literal "r")) (op |) (clause (literal "s")) (op |) (clause (literal "t")) (op |) (clause (literal "u")) (op ||) (clause (literal "v")) (op |) (clause (literal "w")) (op |) (clause (literal "x")) (op |) (clause (literal "y")) (op |) (clause (literal "z"))) ;) (statement (doc (**\nThe rule __digit__ is the set of decimal digits\n\n*)) (lhs digit) = (rhs (clause (literal "0")) (op |) (clause (literal "1")) (op |) (clause (literal "2")) (op |) (clause (literal "3")) (op |) (clause (literal "4")) (op |) (clause (literal "5")) (op |) (clause (literal "6")) (op |) (clause (literal "7")) (op |) (clause (literal "8")) (op |) (clause (literal "9"))) ;) (statement (doc (**\nThe __symbol__ rule enumerates the legal punctuation tokens\n*)) (lhs symbol) = (rhs (clause (literal "[")) (op |) (clause (literal "]")) (op |) (clause (literal "{")) (op |) (clause (literal "}")) (op |) (clause (literal "(")) (op |) (clause (literal ")")) (op |) (clause (literal "<")) (op |) (clause (literal ">")) (op ||) (clause (literal "'")) (op |) (clause (literal '"')) (op |) (clause (literal "=")) (op |) (clause (literal "|")) (op |) (clause (literal ".")) (op |) (clause (literal ",")) (op |) (clause (literal ";"))) ;) (statement (doc (**\nThe __character__ rule enumerates the set of all legal tokens\nexcluding whitespace which is skipped.\n*)) (lhs character) = (rhs (clause (literal letter)) (op |) (clause (literal digit)) (op |) (clause (literal symbol)) (op |) (clause (literal "_"))) ;) (statement (doc (**\n* An __id__ names a rule.\n* An __id__ stats with an alphabetic letter\n * Subsequent characters may be alphabetic, digits or the underscore character\n\n*)) (lhs id) = (rhs (clause (literal letter)) (op ,) (clause { (rhs (clause (literal letter)) (op |) (clause (literal digit)) (op |) (clause (literal "_"))) })) ;) (statement (doc (**\n* A term is a key token in the language being described\n\n*)) (lhs term) = (rhs (clause ( (rhs (clause (literal "'")) (op ,) (clause (literal character)) (op ,) (clause { (rhs (clause (literal character))) }) (op ,) (clause (literal "'"))) )) (op ||) (clause ( (rhs (clause (literal '"')) (op ,) (clause (literal character)) (op ,) (clause { (rhs (clause (literal character))) }) (op ,) (clause (literal '"'))) ))) ;) (statement (doc (**\n* A rule's __lhs__ provides a unique id a rule\n\n*)) (lhs lhs) = (rhs (clause (literal id))) ;) (statement (doc (**\nA rule's __rhs__ provides syntax of the rule.\n\nA rule can be composed of:\n* An id\n* A term\n* A group, option or repetition sub rule\n* A set of alternatives\n* A set of concatenations\n\n*)) (lhs rhs) = (rhs (clause (literal id)) (op ||) (clause (literal term)) (op ||) (clause ( (rhs (clause (literal "[")) (op ,) (clause (literal rhs)) (op ,) (clause (literal "]"))) )) (op ||) (clause ( (rhs (clause (literal "{")) (op ,) (clause (literal rhs)) (op ,) (clause (literal "}"))) )) (op ||) (clause ( (rhs (clause (literal "(")) (op ,) (clause (literal rhs)) (op ,) (clause (literal ")"))) )) (op ||) (clause ( (rhs (clause (literal rhs)) (op ,) (clause (literal "|")) (op ,) (clause (literal rhs))) )) (op ||) (clause ( (rhs (clause (literal rhs)) (op ,) (clause (literal ",")) (op ,) (clause (literal rhs))) ))) ;) (statement (doc (**\nA __rule__ is simply an association of an id with a set of syntax rules\n\n*)) (lhs rule) = (rhs (clause (literal lhs)) (op ,) (clause (literal "=")) (op ,) (clause (literal rhs)) (op ,) (clause (literal ";"))) ;) (statement (doc (**\n* A grammar is the set of rules in a language. \n* A grammar typically has a root rule from where tokens begin to be interpreted\n* Some tools, such as ANTLR, allow parsing to begin from an arbitrary rule which is\nvery convenient.\n*)) (lhs grammar) = (rhs (clause { (rhs (clause (literal rule))) })) ;))
